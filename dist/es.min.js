const isFactory=r=>"function"==typeof r,isPropKey=r=>"string"==typeof r;function mapFactory(a){return a?function(r){const o={};for(const s in a){const n=a[s];var t=r[s];if(!0===n)o[s]=t;else if(isPropKey(n))o[s]=r[n];else if(isFactory(n))o[s]=n(r,o);else if("object"==typeof n)for(const i in n){var e=r[i];o[s]=n[i](null==e?t:e);break}}return o}:mapFactory}function mapTypes(r,o){return r&&o?mapFactory(o)(r):mapTypes}function Convertable(s,t){class r{constructor(r,...o){var t=s(...o)(r);for(const e in t)this[e]=t[e]}}return r.toInput=t?(r,...o)=>t(...o)(r):void 0,r.createConverter=s,r.reverseConverter=t,r}const isPromise=r=>r instanceof Promise,isPromiseArr=r=>Array.isArray(r)&&r.some(isPromise);function flattenPromises(o){const r=[];for(const s in o){var t=o[s],e=r=>r.then(r=>{o[s]=r});isPromise(t)?r.push(e(t)):isPromiseArr(t)&&r.push(e(Promise.all(t)))}return Promise.all(r).then(r=>o)}function wait(o){return r=>flattenPromises(o(r))}export{Convertable,flattenPromises,isFactory,isPropKey,mapFactory,mapTypes,wait};
//# sourceMappingURL=es.min.js.map
