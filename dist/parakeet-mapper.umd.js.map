{"version":3,"file":"parakeet-mapper.umd.js","sources":["../src/index.ts"],"sourcesContent":["export function mapTypes<\n  I extends object,\n  O extends object,\n>(input: I, FieldMap: TypeMap<Partial<I>, Partial<O>>): O {\n  if (\n    !FieldMap ||\n    Array.isArray(FieldMap) ||\n    !Object.keys(FieldMap).length\n  ) {\n    return {} as O;\n  }\n\n  const result: Partial<O> = {};\n  for (const key in FieldMap) {\n    if (typeof FieldMap[key] === 'boolean' && FieldMap[key]) {\n      result[key] = input[key as string] as any;\n      continue;\n    }\n\n    if (typeof FieldMap[key] === 'string') {\n      result[key] = input[FieldMap[key as string]] as any;\n      continue;\n    }\n\n    if (typeof FieldMap[key] === 'function') {\n      let mapperValue = (FieldMap[key] as Function)(input)\n      result[key] = mapperValue;\n      continue;\n    }\n  }\n\n  return result as O;\n};\n\nexport type TypeMap<\n  I extends object,\n  O extends object\n> = {\n  /**\n   * if has function - map by funciton\n   * if true - map straight without changes\n   * if false - do not map\n   */\n    [key in keyof O]: boolean | keyof I | ((obj: I) => O[key]);\n};\n"],"names":[],"mappings":";;;;;;WAAgB,QAAQ,CAGtB,KAAQ,EAAE,QAAyC;MACnD,IACE,CAAC,QAAQ;UACT,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC;UACvB,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,MAAM,EAC7B;UACA,OAAO,EAAO,CAAC;OAChB;MAED,IAAM,MAAM,GAAe,EAAE,CAAC;MAC9B,KAAK,IAAM,GAAG,IAAI,QAAQ,EAAE;UAC1B,IAAI,OAAO,QAAQ,CAAC,GAAG,CAAC,KAAK,SAAS,IAAI,QAAQ,CAAC,GAAG,CAAC,EAAE;cACvD,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,GAAa,CAAQ,CAAC;cAC1C,SAAS;WACV;UAED,IAAI,OAAO,QAAQ,CAAC,GAAG,CAAC,KAAK,QAAQ,EAAE;cACrC,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,GAAa,CAAC,CAAQ,CAAC;cACpD,SAAS;WACV;UAED,IAAI,OAAO,QAAQ,CAAC,GAAG,CAAC,KAAK,UAAU,EAAE;cACvC,IAAI,WAAW,GAAI,QAAQ,CAAC,GAAG,CAAc,CAAC,KAAK,CAAC,CAAA;cACpD,MAAM,CAAC,GAAG,CAAC,GAAG,WAAW,CAAC;cAC1B,SAAS;WACV;OACF;MAED,OAAO,MAAW,CAAC;EACrB,CAAC;;;;;;;;;;;;"}